# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from sklearn.model_selection import KFold
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten

import numpy as np
import cv2
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.metrics import precision_recall_fscore_support
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QLabel, QMainWindow, QApplication, QWidget, QVBoxLayout, QFileDialog
from PyQt5.QtGui import QPixmap
import sys
import os

import DatasetFuncs
import CustomFuncs

#Global Variables
glob_variables = {
        'img_width' : 256,
        'img_height': 256,
        
        'bach_data_dir': 'bach/',                                   #path to training images 
        'bioimaging_data_dir': 'bioimaging/',                        #path to testing images 
        'top_model_weights_path': 'models/',
        
        'bach_patch_images_data_dir': 'train/',
        'bioimaging_patch_images_data_dir': 'test/',
        'predict_patch_images_data_dir': 'predict/',
        
        'num_classes': 4,
        'epochs': 16,
        'batch_size': 32,                                           #batch size used by flow_from_directory and predict_generator
        'patch_image_count': 20,
        
        'model': 'VGG16',
        'activation': 'softmax',
        'optimizer': 'SGD'
}

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(765, 622)
        MainWindow.setMinimumSize(QtCore.QSize(600, 600))
        MainWindow.setMaximumSize(QtCore.QSize(2000, 2000))
        MainWindow.setAutoFillBackground(False)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 761, 601))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setElideMode(QtCore.Qt.ElideMiddle)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setEnabled(True)
        self.tab_3.setStyleSheet("")
        self.tab_3.setObjectName("tab_3")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 740, 905))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.progressBar = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout.addWidget(self.progressBar, 1, 0, 1, 1)
        self.console_textEdit = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.console_textEdit.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.console_textEdit.setObjectName("console_textEdit")
        self.gridLayout.addWidget(self.console_textEdit, 2, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.trainButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.trainButton.setFont(font)
        self.trainButton.setObjectName("trainButton")
        self.horizontalLayout_3.addWidget(self.trainButton)
        self.testButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.testButton.setFont(font)
        self.testButton.setObjectName("testButton")
        self.horizontalLayout_3.addWidget(self.testButton)
        self.gridLayout_2.addLayout(self.horizontalLayout_3, 3, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.model_label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_label_2.setFont(font)
        self.model_label_2.setObjectName("model_label_2")
        self.horizontalLayout_2.addWidget(self.model_label_2)
        spacerItem = QtWidgets.QSpacerItem(114, 44, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.epoch_text = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.epoch_text.setFont(font)
        self.epoch_text.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.epoch_text.setObjectName("epoch_text")
        self.horizontalLayout_2.addWidget(self.epoch_text)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 2, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.model_label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_label_3.setFont(font)
        self.model_label_3.setObjectName("model_label_3")
        self.horizontalLayout.addWidget(self.model_label_3)
        self.model_comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_comboBox.setFont(font)
        self.model_comboBox.setObjectName("model_comboBox")
        self.horizontalLayout.addWidget(self.model_comboBox)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.model_label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.model_label_4.setFont(font)
        self.model_label_4.setObjectName("model_label_4")
        self.horizontalLayout_5.addWidget(self.model_label_4)
        self.size_comboBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.size_comboBox.setFont(font)
        self.size_comboBox.setObjectName("size_comboBox")
        self.horizontalLayout_5.addWidget(self.size_comboBox)
        self.gridLayout_2.addLayout(self.horizontalLayout_5, 1, 0, 1, 1)
        self.horizontalLayout_4.addLayout(self.gridLayout_2)
        self.confussion_layout = QtWidgets.QHBoxLayout()
        self.confussion_layout.setObjectName("confussion_layout")
        self.horizontalLayout_4.addLayout(self.confussion_layout)
        self.gridLayout.addLayout(self.horizontalLayout_4, 0, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.gridLayoutWidget = QtWidgets.QWidget(self.tab_4)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(150, 10, 431, 441))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.img2Label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.img2Label.setStyleSheet("background-color: lightgray")
        self.img2Label.setText("")
        self.img2Label.setObjectName("img2Label")
        self.gridLayout_3.addWidget(self.img2Label, 0, 1, 1, 1)
        self.img1Label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.img1Label.setStyleSheet("background-color: lightgray")
        self.img1Label.setText("")
        self.img1Label.setObjectName("img1Label")
        self.gridLayout_3.addWidget(self.img1Label, 0, 0, 1, 1)
        self.img3Label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.img3Label.setStyleSheet("background-color: lightgray")
        self.img3Label.setText("")
        self.img3Label.setObjectName("img3Label")
        self.gridLayout_3.addWidget(self.img3Label, 1, 0, 1, 1)
        self.img4Label = QtWidgets.QLabel(self.gridLayoutWidget)
        self.img4Label.setStyleSheet("background-color: lightgray")
        self.img4Label.setText("")
        self.img4Label.setObjectName("img4Label")
        self.gridLayout_3.addWidget(self.img4Label, 1, 1, 1, 1)
        self.predictButton = QtWidgets.QPushButton(self.tab_4)
        self.predictButton.setGeometry(QtCore.QRect(280, 490, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.predictButton.setFont(font)
        self.predictButton.setObjectName("predictButton")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab_4)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 70, 121, 80))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pred1Label = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pred1Label.setFont(font)
        self.pred1Label.setAlignment(QtCore.Qt.AlignCenter)
        self.pred1Label.setObjectName("pred1Label")
        self.verticalLayout_2.addWidget(self.pred1Label)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tab_4)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 300, 121, 80))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pred3Label = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pred3Label.setFont(font)
        self.pred3Label.setAlignment(QtCore.Qt.AlignCenter)
        self.pred3Label.setObjectName("pred3Label")
        self.verticalLayout_3.addWidget(self.pred3Label)
        self.label_8 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_8.setFont(font)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_3.addWidget(self.label_8)
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.tab_4)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(600, 70, 121, 80))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.pred2Label = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pred2Label.setFont(font)
        self.pred2Label.setAlignment(QtCore.Qt.AlignCenter)
        self.pred2Label.setObjectName("pred2Label")
        self.verticalLayout_4.addWidget(self.pred2Label)
        self.label_10 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_4.addWidget(self.label_10)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.tab_4)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(600, 300, 121, 80))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.pred4Label = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pred4Label.setFont(font)
        self.pred4Label.setAlignment(QtCore.Qt.AlignCenter)
        self.pred4Label.setObjectName("pred4Label")
        self.verticalLayout_5.addWidget(self.pred4Label)
        self.label_12 = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_12.setFont(font)
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_5.addWidget(self.label_12)
        self.tabWidget.addTab(self.tab_4, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.predictSingleLabel = QtWidgets.QLabel(self.tab)
        self.predictSingleLabel.setGeometry(QtCore.QRect(220, 60, 311, 311))
        self.predictSingleLabel.setStyleSheet("background-color: lightgray")
        self.predictSingleLabel.setText("")
        self.predictSingleLabel.setObjectName("predictSingleLabel")
        self.addImageButton = QtWidgets.QPushButton(self.tab)
        self.addImageButton.setGeometry(QtCore.QRect(220, 440, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.addImageButton.setFont(font)
        self.addImageButton.setObjectName("addImageButton")
        self.predictSingleButton = QtWidgets.QPushButton(self.tab)
        self.predictSingleButton.setGeometry(QtCore.QRect(220, 490, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.predictSingleButton.setFont(font)
        self.predictSingleButton.setObjectName("predictSingleButton")
        self.imagePathLabel = QtWidgets.QLabel(self.tab)
        self.imagePathLabel.setGeometry(QtCore.QRect(200, 370, 351, 20))
        self.imagePathLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.imagePathLabel.setObjectName("imagePathLabel")
        self.predictSingleClassLabel = QtWidgets.QLabel(self.tab)
        self.predictSingleClassLabel.setGeometry(QtCore.QRect(220, 400, 311, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.predictSingleClassLabel.setFont(font)
        self.predictSingleClassLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.predictSingleClassLabel.setObjectName("predictSingleClassLabel")
        self.tabWidget.addTab(self.tab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Classification of Breast Cancer Images Using Deep Learning Methods"))
        self.console_textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.trainButton.setText(_translate("MainWindow", "Test BACH"))
        self.testButton.setText(_translate("MainWindow", "Test Bioimaging 2015"))
        self.model_label_2.setText(_translate("MainWindow", "Epoch: "))
        self.epoch_text.setText(_translate("MainWindow", "16"))
        self.model_label_3.setText(_translate("MainWindow", "Model:"))
        self.model_label_4.setText(_translate("MainWindow", "Size:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Test"))
        self.predictButton.setText(_translate("MainWindow", "Predict"))
        self.pred1Label.setText(_translate("MainWindow", "-"))
        self.label_2.setText(_translate("MainWindow", "Benign (R)"))
        self.pred3Label.setText(_translate("MainWindow", "-"))
        self.label_8.setText(_translate("MainWindow", "Invasive (R)"))
        self.pred2Label.setText(_translate("MainWindow", "-"))
        self.label_10.setText(_translate("MainWindow", "InSitu (R)"))
        self.pred4Label.setText(_translate("MainWindow", "-"))
        self.label_12.setText(_translate("MainWindow", "Normal (R)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Predict"))
        self.addImageButton.setText(_translate("MainWindow", "Add Image"))
        self.predictSingleButton.setText(_translate("MainWindow", "Predict"))
        self.imagePathLabel.setText(_translate("MainWindow", "-"))
        self.predictSingleClassLabel.setText(_translate("MainWindow", "-"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Predict Single"))
        
    def test(self):
        # self.console_textEdit.append("----Bioimaging Test Started----")
        self.console_textEdit.append(glob_variables['model'] + ' ' + str(glob_variables['img_width']) + ' Epoch: ' + str(glob_variables['epochs']))

        validation_data,validation_labels = DatasetFuncs.load_bach_bottleneck(glob_variables)
        class_labels= ['Benign','InSitu','Invasive','Normal']
        
        model = Sequential()
        model.add(Flatten(input_shape=validation_data.shape[1:]))
        model.add(Dense(256, activation='relu'))
        model.add(Dropout(0.5))
        model.add(Dense(glob_variables['num_classes'], 
                        activation=glob_variables['activation']))
        
        model.compile(optimizer=glob_variables['optimizer'],
                      loss='poisson', 
                      metrics=['accuracy'])
        
        history = model.fit(validation_data,
                            validation_labels ,
                            epochs=glob_variables['epochs'],
                            batch_size=glob_variables['batch_size'])
        
        #model.save_weights(top_model_weights_path)

        bioimaging_data, bioimaging_labels = DatasetFuncs.load_bioimaging_bottleneck(glob_variables)
        
        (eval_loss, eval_accuracy) = model.evaluate(bioimaging_data, 
                                                    bioimaging_labels, 
                                                    batch_size=glob_variables['batch_size'], 
                                                    verbose=1)
        self.progressBar.setValue(40)
        pred = model.predict(bioimaging_data, verbose = 0)
        y_pred = np.argmax(pred, axis = 1)
        y_test = np.argmax(bioimaging_labels, axis = 1)
        
        cnf_matrix = confusion_matrix(y_test, y_pred)
        
        
        CustomFuncs.plot_confusion_matrix(cnf_matrix,classes=class_labels,
                                          normalize=False,
                                          title='Confusion matrix', 
                                          cmap=plt.cm.Blues)

        
        if self.confussion_layout.isEmpty() == False:
            for i in reversed(range(self.confussion_layout.count())):
                self.confussion_layout.removeWidget(self.confussion_layout.itemAt(i).widget())
        
        
        label = QtWidgets.QLabel(self.centralwidget)
        label.setMaximumWidth(448)
        label.setMaximumHeight(336)
        label.setScaledContents(True)
        pixmap = QPixmap("confusion_matrix.png")
        # pixmap.scaled(192, 144)
        label.setPixmap(pixmap)
        self.confussion_layout.addWidget(label)

        
        self.console_textEdit.append("[INFO] accuracy: {:.2f}%".format(eval_accuracy * 100))
        # self.console_textEdit.append("[INFO] Loss: {}".format(eval_loss))
        
        precision, recall, f1, _ = precision_recall_fscore_support(y_test, y_pred, average = "weighted")
        
        self.progressBar.setValue(85)
        
        self.console_textEdit.append("Precision: " + str(precision))
        self.console_textEdit.append("Recall: " + str(recall))
        self.console_textEdit.append("F1: " + str(f1))
        
        self.progressBar.setValue(100)
        self.console_textEdit.append(" ")
    
    def train(self):
        self.console_textEdit.append(glob_variables['model'] + ' ' + str(glob_variables['img_width']) + ' Epoch: ' + str(glob_variables['epochs']))

        validation_data,validation_labels = DatasetFuncs.load_bach_bottleneck(glob_variables)
        class_labels= ['Benign','InSitu','Invasive','Normal']
        acc_per_fold = []
        loss_per_fold = []
        kf = KFold(n_splits=5, shuffle=True, random_state=1)
        fold_no = 0
        
        acc_arr = []
        recall_arr = []
        precision_arr = []
        f1_arr = []
        cnf_matrix = None
        for train, test in kf.split(validation_data,validation_labels):
            # print(validation_data[train].shape, validation_data[test].shape,validation_labels[train].shape,validation_labels[test].shape)
            model = Sequential()
            model.add(Flatten(input_shape=validation_data[train].shape[1:]))
            model.add(Dense(256, activation='relu'))
            model.add(Dropout(0.5))
            model.add(Dense(glob_variables['num_classes'], 
                            activation=glob_variables['activation']))
        
            model.compile(optimizer=glob_variables['optimizer'],
                          loss='poisson', 
                          metrics=['accuracy'])
          
            print('Training for fold {fold_no} ...',fold_no)
          
            history = model.fit(validation_data[train], 
                                validation_labels[train],
                                epochs=glob_variables['epochs'],
                                batch_size=glob_variables['batch_size'])
        
            #model.save_weights(top_model_weights_path)
        
            (eval_loss, eval_accuracy) = model.evaluate(validation_data[test], 
                                                        validation_labels[test], 
                                                        batch_size=glob_variables['batch_size'], 
                                                        verbose=1)
        
            print("[INFO] accuracy: {:.2f}%".format(eval_accuracy * 100))
            print("[INFO] Loss: {}".format(eval_loss))
            fold_no = fold_no + 1
            acc_per_fold.append(eval_accuracy)
            loss_per_fold.append(eval_loss)
            # model = None
            
            pred = model.predict(validation_data, verbose = 0)
            y_pred = np.argmax(pred, axis = 1)
            y_test = np.argmax(validation_labels, axis = 1)
            cnf_matrix = confusion_matrix(y_test, y_pred)
            CustomFuncs.plot_confusion_matrix(cnf_matrix,classes=class_labels,
                                              normalize=False,
                                              title='Confusion matrix', 
                                              cmap=plt.cm.Blues)
            
            
            precision, recall, f1, _ = precision_recall_fscore_support(y_test, y_pred, average = "weighted")
            print("Recall: ", recall)
            print("Precision: ", precision)
            print("F1: ", f1)
            
            acc_arr.append(eval_accuracy)
            recall_arr.append(recall)
            precision_arr.append(precision)
            f1_arr.append(f1)
            
            
        if self.confussion_layout.isEmpty() == False:
            for i in reversed(range(self.confussion_layout.count())):
                self.confussion_layout.removeWidget(self.confussion_layout.itemAt(i).widget())
    
    
        label = QtWidgets.QLabel(self.centralwidget)
        label.setMaximumWidth(448)
        label.setMaximumHeight(336)
        label.setScaledContents(True)
        pixmap = QPixmap("confusion_matrix.png")
        # pixmap.scaled(192, 144)
        label.setPixmap(pixmap)
        self.confussion_layout.addWidget(label)
        
        
        self.console_textEdit.append("Average Accuracy: " + str(CustomFuncs.Average(acc_arr)))
        self.console_textEdit.append("Average Recall: " + str(CustomFuncs.Average(recall_arr)))
        self.console_textEdit.append("Average Precision: " + str(CustomFuncs.Average(precision_arr)))
        self.console_textEdit.append("Average F1: " + str(CustomFuncs.Average(f1_arr)))
        
    def predict(self):
        class_labels= ['Benign (Predict)','InSitu (Predict)','Invasive (Predict)','Normal (Predict)']
        
        patch_images_path = glob_variables['bioimaging_patch_images_data_dir'] + str(glob_variables['img_width']) + '/'
        
        rnd_benign_image_name = CustomFuncs.get_random_image_name_from_directory(patch_images_path + 'Benign')   
        benign_pixmap = QPixmap(patch_images_path + 'Benign/' + rnd_benign_image_name)        
        self.img1Label.setPixmap(benign_pixmap)
        rnd_benign_image = cv2.imread(patch_images_path + 'Benign/' + rnd_benign_image_name)
        cv2.imwrite(os.path.join(glob_variables['predict_patch_images_data_dir'] + '/Benign', '1.png'), rnd_benign_image)
        
        rnd_insitu_image_name = CustomFuncs.get_random_image_name_from_directory(patch_images_path + 'InSitu')
        insitu_pixmap = QPixmap(patch_images_path + 'InSitu/' + rnd_insitu_image_name)
        self.img2Label.setPixmap(insitu_pixmap)
        rnd_insitu_image = cv2.imread(patch_images_path + 'InSitu/' + rnd_insitu_image_name)
        cv2.imwrite(os.path.join(glob_variables['predict_patch_images_data_dir'] + '/InSitu', '1.png'), rnd_insitu_image)
        
        rnd_invasive_image_name = CustomFuncs.get_random_image_name_from_directory(patch_images_path + 'Invasive')
        invasive_pixmap = QPixmap(patch_images_path + 'Invasive/' + rnd_invasive_image_name)
        self.img3Label.setPixmap(invasive_pixmap)
        rnd_invasive_image = cv2.imread(patch_images_path + 'Invasive/' + rnd_invasive_image_name)
        cv2.imwrite(os.path.join(glob_variables['predict_patch_images_data_dir'] + '/Invasive', '1.png'), rnd_invasive_image)
        
        rnd_normal_image_name = CustomFuncs.get_random_image_name_from_directory(patch_images_path + 'Normal')
        normal_pixmap = QPixmap(patch_images_path + 'Normal/' + rnd_normal_image_name)
        self.img4Label.setPixmap(normal_pixmap)
        rnd_normal_image = cv2.imread(patch_images_path + 'Normal/' + rnd_normal_image_name)
        cv2.imwrite(os.path.join(glob_variables['predict_patch_images_data_dir'] + '/Normal', '1.png'), rnd_normal_image)
        
        
        bottleneck = DatasetFuncs.get_prediction_bottleneck(glob_variables)
        print(bottleneck.shape)
                
        new_model = tf.keras.models.load_model(glob_variables['top_model_weights_path'] + '/' + glob_variables['model'] + '/' + str(glob_variables['img_width']) + '/')
    
        pred = new_model.predict_classes(bottleneck, batch_size=10)
        print(pred)
        
        self.pred1Label.setText(class_labels[pred[0]])
        self.pred2Label.setText(class_labels[pred[1]])
        self.pred3Label.setText(class_labels[pred[2]])
        self.pred4Label.setText(class_labels[pred[3]])
        print("PREDICT DONE")
        
    def predictSingle(self):
        class_labels= ['Benign (Predict)','InSitu (Predict)','Invasive (Predict)','Normal (Predict)']
        bottleneck = DatasetFuncs.predict_single(glob_variables)
        print(bottleneck.shape)
        
        new_model = tf.keras.models.load_model(glob_variables['top_model_weights_path'] + '/' + glob_variables['model'] + '/' + str(glob_variables['img_width']) + '/')
            
        pred = new_model.predict_classes(bottleneck, batch_size=10)
        
        self.predictSingleClassLabel.setText(class_labels[pred[0]])
        print(pred)
        print("PREDICT SINGLE DONE")
    
    def testClicked(self):
        self.progressBar.setValue(0)
        size_index = self.size_comboBox.currentIndex()
        if size_index == 0:
            glob_variables['img_width'] = 256
            glob_variables['img_height'] = 256
        elif size_index == 1:
            glob_variables['img_width'] = 128
            glob_variables['img_height'] = 128
        elif size_index == 2:
            glob_variables['img_width'] = 75
            glob_variables['img_height'] = 75
        
        glob_variables['model'] = self.model_comboBox.currentText()
        glob_variables['epochs'] = int(self.epoch_text.text())
        
        self.console_textEdit.append("----Bioimaging Test Started----")
        self.test()
        
    def trainClicked(self):
        print("trainClicked")

        size_index = self.size_comboBox.currentIndex()
        if size_index == 0:
            glob_variables['img_width'] = 256
            glob_variables['img_height'] = 256
        elif size_index == 1:
            glob_variables['img_width'] = 128
            glob_variables['img_height'] = 128
        elif size_index == 2:
            glob_variables['img_width'] = 75
            glob_variables['img_height'] = 75
        
        glob_variables['model'] = self.model_comboBox.currentText()
        glob_variables['epochs'] = int(self.epoch_text.text())
        
        self.train()
        
        
    def predictClicked(self):
        print("predictClicked")
        
        size_index = self.size_comboBox.currentIndex()
        if size_index == 0:
            glob_variables['img_width'] = 256
            glob_variables['img_height'] = 256
        elif size_index == 1:
            glob_variables['img_width'] = 128
            glob_variables['img_height'] = 128
        elif size_index == 2:
            glob_variables['img_width'] = 75
            glob_variables['img_height'] = 75
        
        glob_variables['model'] = self.model_comboBox.currentText()
        glob_variables['epochs'] = int(self.epoch_text.text())
        
        print(glob_variables)
        
        self.predict()
        
    def addImageClicked(self):
        print("Add Image Clicked")
        fileName = QFileDialog.getOpenFileName(None,"Select Image");
        imageFullPath = fileName[0]
        self.imagePathLabel.setText(imageFullPath)
 
        benign_pixmap = QPixmap(imageFullPath)        
        self.predictSingleLabel.setPixmap(benign_pixmap)
        
        image = cv2.imread(imageFullPath)
        cv2.imwrite(os.path.join('predict_single/folder', '1.png'), image)
        
    def singlePredictClicked(self):
        print("singlePredictClicked")
        size_index = self.size_comboBox.currentIndex()
        if size_index == 0:
            glob_variables['img_width'] = 256
            glob_variables['img_height'] = 256
        elif size_index == 1:
            glob_variables['img_width'] = 128
            glob_variables['img_height'] = 128
        elif size_index == 2:
            glob_variables['img_width'] = 75
            glob_variables['img_height'] = 75
        
        glob_variables['model'] = self.model_comboBox.currentText()
        glob_variables['epochs'] = int(self.epoch_text.text())
        
        self.predictSingle()


    def setupUI(self, MainWindow):
        self.img1Label.setScaledContents(True)
        self.img2Label.setScaledContents(True)
        self.img3Label.setScaledContents(True)
        self.img4Label.setScaledContents(True)
        self.predictSingleLabel.setScaledContents(True)
        
        self.model_comboBox.addItems(["Xception", 
                                      "NASNetLarge", 
                                      "DenseNet201", 
                                      "VGG16",
                                      "VGG19",
                                      "InceptionV3",
                                      "InceptionResNetV2",
                                      "ResNet152V2"])
        
        self.size_comboBox.addItems(["256x256", 
                                     "128x128",
                                     "75x75"])
        self.trainButton.clicked.connect(self.trainClicked)
        self.testButton.clicked.connect(self.testClicked)
        self.predictButton.clicked.connect(self.predictClicked)
        self.addImageButton.clicked.connect(self.addImageClicked)
        self.predictSingleButton.clicked.connect(self.singlePredictClicked)

from mplwidget import MplWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.setupUI(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())